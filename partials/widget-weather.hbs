{{!-- Slim Weather Widget v10 (mini) --}}
<section class="weather-slim weather-slim--mini" data-weather-slim>
  <div class="weather-slim-inner mini">
    <div class="ws-left">
      <h3 class="ws-title">
        <span class="ws-emoji" data-w-emoji>‚õÖ</span>
        <span>Los Angeles Weather</span>
      </h3>
      <div class="ws-primary">
        <span class="ws-temp" data-w-temp>--¬∞</span>
        <span class="ws-cond" data-w-cond>Loading</span>
      </div>
      <div class="ws-sunline">
        <span class="sun-item">
          <span class="sun-label">Sunrise</span>
          <span data-w-sunrise>--:--</span>
        </span>
        <span class="sun-sep">‚Ä¢</span>
        <span class="sun-item">
          <span class="sun-label">Sunset</span>
          <span data-w-sunset>--:--</span>
        </span>
      </div>
    </div>
    <div class="ws-meta ws-meta--mini">
      <div data-box="wind">
        <span class="ws-label">Wind</span>
        <span data-w-wind>-- mph</span>
      </div>
      <div data-box="surf">
        <span class="ws-label">Surf</span>
        <span data-w-surf>-- ft</span>
      </div>
      <div data-box="tide-high">
        <span class="ws-label">High Tide</span>
        <span data-w-tide-high>-- ft @ --:--</span>
      </div>
      <div data-box="tide-low">
        <span class="ws-label">Low Tide</span>
        <span data-w-tide-low>-- ft @ --:--</span>
      </div>
    </div>
  </div>
</section>

<script>
(function(){
  const root = document.currentScript.previousElementSibling?.matches('[data-weather-slim]')
    ? document.currentScript.previousElementSibling
    : document.querySelector('[data-weather-slim]');
  if(!root) return;
  const $ = s => root.querySelector(s);
  const el = {
    emoji: $('[data-w-emoji]'),
    temp: $('[data-w-temp]'),
    cond: $('[data-w-cond]'),
    wind: $('[data-w-wind]'),
    sunrise: $('[data-w-sunrise]'),
    sunset: $('[data-w-sunset]'),
    surf: $('[data-w-surf]'),
    tideHigh: $('[data-w-tide-high]'),
    tideLow: $('[data-w-tide-low]')
  };

  const WEATHER_API =
    'https://api.open-meteo.com/v1/forecast'
    + '?latitude=34.05&longitude=-118.24'
    + '&temperature_unit=fahrenheit'
    + '&wind_speed_unit=mph'
    + '&current=temperature_2m,weather_code,wind_speed_10m'
    + '&daily=sunrise,sunset'
    + '&timezone=America%2FLos_Angeles';

  const MARINE_API =
    'https://marine-api.open-meteo.com/v1/marine'
    + '?latitude=34.01&longitude=-118.50'
    + '&hourly=wave_height'
    + '&timezone=America%2FLos_Angeles';

  function todayYMD(){
    const now = new Date();
    return now.getFullYear() + String(now.getMonth()+1).padStart(2,'0') + String(now.getDate()).padStart(2,'0');
  }
  const NOAA_TIDES =
    'https://api.tidesandcurrents.noaa.gov/api/prod/datagetter'
    + '?product=predictions&application=curationsla&datum=MLLW'
    + '&station=9410840&time_zone=lst_ldt&units=english&interval=hilo&format=json'
    + '&begin_date=' + todayYMD() + '&end_date=' + todayYMD();

  const codeMap = {
    0:'Clear',1:'Mostly Clear',2:'Partly Cloudy',3:'Overcast',
    45:'Fog',48:'Fog',51:'Drizzle',53:'Drizzle',55:'Drizzle',
    61:'Rain',63:'Rain',65:'Heavy Rain',71:'Snow',80:'Showers',95:'Thunderstorm'
  };
  function emoji(c){
    if([0,1].includes(c)) return '‚òÄÔ∏è';
    if(c===2) return '‚õÖ';
    if([3,45,48].includes(c)) return '‚òÅÔ∏è';
    if([51,53,55].includes(c)) return 'üå¶Ô∏è';
    if([61,63,65,80].includes(c)) return 'üåßÔ∏è';
    if(c===95) return '‚õàÔ∏è';
    return 'üå§Ô∏è';
  }
  function fmtTime(str){
    if(!str) return '--:--';
    const d = new Date(str);
    let h = d.getHours();
    const m = String(d.getMinutes()).padStart(2,'0');
    const am = h < 12 ? 'am':'pm';
    h = h % 12 || 12;
    return h + ':' + m + am;
  }
  function fmtTimeNoDate(str){
    if(!str) return '--:--';
    const parts = str.split(/\D/);
    const h24 = parseInt(parts[3],10);
    const m = parts[4];
    const am = h24 < 12 ? 'am':'pm';
    const h = (h24 % 12) || 12;
    return h + ':' + m + am;
  }
  function metersToFt(m){ return m * 3.28084; }

  Promise.all([
    fetch(WEATHER_API,{cache:'no-store'}).then(r=>r.json()).catch(()=>null),
    fetch(MARINE_API,{cache:'no-store'}).then(r=>r.json()).catch(()=>null),
    fetch(NOAA_TIDES,{cache:'no-store'}).then(r=>r.json()).catch(()=>null)
  ])
  .then(([w,mar,tides])=>{
    if(w && w.current){
      const c = w.current;
      el.temp.textContent = Math.round(c.temperature_2m) + '¬∞';
      el.cond.textContent = codeMap[c.weather_code] || '‚Äî';
      el.wind.textContent = Math.round(c.wind_speed_10m) + ' mph';
      el.emoji.textContent = emoji(c.weather_code);
      if(w.daily){
        el.sunrise.textContent = fmtTime(w.daily.sunrise?.[0]);
        el.sunset.textContent  = fmtTime(w.daily.sunset?.[0]);
      }
    }
    if(mar && mar.hourly){
      const times = mar.hourly.time;
      const waves = mar.hourly.wave_height;
      const now = Date.now();
      let idx = times.findIndex(t => Date.parse(t) > now);
      if(idx < 0) idx = 0;
      const slice = waves.slice(idx, idx + 6);
      if(slice.length){
        let min = Math.min(...slice);
        let max = Math.max(...slice);
        min = metersToFt(min);
        max = metersToFt(max);
        el.surf.textContent = min.toFixed(1)+'‚Äì'+max.toFixed(1)+' ft';
      }
    }
    if(tides && tides.predictions){
      const preds = tides.predictions;
      const now = Date.now();
      const future = preds.filter(p => Date.parse(p.t.replace(' ','T')) > now);
      let nextHigh = future.find(p => p.type === 'H') || [...preds].reverse().find(p=>p.type==='H');
      let nextLow  = future.find(p => p.type === 'L') || [...preds].reverse().find(p=>p.type==='L');
      if(nextHigh){
        el.tideHigh.textContent = parseFloat(nextHigh.v).toFixed(1)+' ft @ '+fmtTimeNoDate(nextHigh.t);
      }
      if(nextLow){
        el.tideLow.textContent = parseFloat(nextLow.v).toFixed(1)+' ft @ '+fmtTimeNoDate(nextLow.t);
      }
    }
  })
  .catch(()=>{/* silent */});
})();
</script>